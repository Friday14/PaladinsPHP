<?php
namespace Smite;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-17 at 23:10:20.
 */
class RequestTest extends \PHPUnit_Framework_TestCase
{
	use MockHttp;

	/**
	 * @var API
	 */
	protected $api;

	private $devId = 12345;
	private $authKey = "testauthkey";

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->api = new API($this->devId, $this->authKey);
		$this->setUpMockData();
	}

	/**
	 * @covers Smite\Request::addArgs
	 * @covers Smite\Request::getRequestedUrl
	 */
	public function testGetUrlAndAddArgs()
	{
		// test no args
		$request = new Request($this->api, 'ping');
		$this->assertEquals($request->getRequestedUrl(), 'http://api.smitegame.com/smiteapi.svc/pingjson');

		// test empty add args
		$request = new Request($this->api, 'ping');
		$request->addArgs();
		$this->assertEquals($request->getRequestedUrl(), 'http://api.smitegame.com/smiteapi.svc/pingjson');
		
		// test adding args
		$request = new Request($this->api, 'ping');
		$request->addArgs(['arg1', 'arg2', 'arg3']);
		$this->assertEquals($request->getRequestedUrl(), 'http://api.smitegame.com/smiteapi.svc/pingjson/arg1/arg2/arg3');
	}

	/**
	 * @covers Smite\Request::send
	 */
	public function testSend()
	{
		$this->getsData(200, '{"hello":"world"}');
		$request = new Request($this->api, 'ping');
		$data = $request->send();
		$this->assertEquals($this->requestHistory->getLastRequest()->getUrl(),
			'http://api.smitegame.com/smiteapi.svc/pingjson');
		$this->assertObjectHasAttribute('hello', $data);
		$this->assertEquals('world', $data->hello);
	}

	/**
	 * @covers Smite\Request::getTimestamp
	 */
	public function testGetTimestamp()
	{
		$request = new Request($this->api, 'createsession');
		$request->getRequestedUrl();
		$this->assertInstanceOf('DateTime', $request->getTimestamp());
		$this->assertEquals(time(), $request->getTimestamp()->getTimestamp());
	}

	/**
	 * @covers Smite\Request::requiresSession
	 */
	public function testRequiresSession()
	{
		// should not require a session for these
		$this->assertFalse((new Request($this->api, 'ping'))->requiresSession());
		$this->assertFalse((new Request($this->api, 'createsession'))->requiresSession());
		// should require a session for anyting else
		$this->assertTrue((new Request($this->api, 'testsession'))->requiresSession());
		$this->assertTrue((new Request($this->api, 'getplayer'))->requiresSession());
	}

	/**
	 * @covers Smite\Request::mapArgs
	 */
	public function testMappedParams() {
		// Get around stub out existence of session
		$stubApi = $this->getMockBuilder('Smite\\API')
			->setConstructorArgs([$this->devId, $this->authKey])
			->setMethods(['getSession'])
			->getMock();
		$stubSession = $this->getMockBuilder('Smite\\Session')->disableOriginalConstructor()->getMock($stubApi);
		$stubApi->method('getSession')->willReturn($stubSession);
		$stubSession->method('getKey')->willReturn('FAKESESSION');

		$request = new Request($stubApi, 'getqueuestats');
		$request->addArgs(['ConquestChallenge', 'Gold1']);
		$this->assertStringEndsWith('/429/15', $request->getRequestedUrl());
	}
}
