<?php
namespace Smite;

use GuzzleHttp\Subscriber\Mock;
use GuzzleHttp\Subscriber\History;
use GuzzleHttp\Message\Response;
use GuzzleHttp\Stream\Stream;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-22 at 02:19:40.
 */
class APITest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var API
     */
    protected $object;

    private $devId = 12345;
    private $authKey = "testauthkey";

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new API($this->devId, $this->authKey);
    }

    /**
     * @covers Smite\API::getDevId
     */
    public function testGetDevId()
    {
        $this->assertEquals($this->object->getDevId(), $this->devId);
    }

    /**
     * @covers Smite\API::getAuthKey
     */
    public function testGetAuthKey()
    {
        $this->assertEquals($this->object->getAuthKey(), $this->authKey);
    }

    /**
     * @covers Smite\API::getGuzzleClient
     */
    public function testGetGuzzleClient()
    {
        $this->assertInstanceOf('GuzzleHttp\Client', $this->object->getGuzzleClient());
    }

    /**
     * @covers Smite\API::preferFormat
     * @todo   Implement testPreferFormat().
     */
    public function testPreferFormat()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Smite\API::useLanguage
     * @todo   Implement testUseLanguage().
     */
    public function testUseLanguage()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Smite\API::sessionRequiredFor
     */
    public function testSessionRequiredFor()
    {
        $this->assertTrue($this->object->sessionRequiredFor('testsession'));
        $this->assertTrue($this->object->sessionRequiredFor('getplayer'));
        $this->assertFalse($this->object->sessionRequiredFor('ping'));
        $this->assertFalse($this->object->sessionRequiredFor('createsession'));
    }

    /**
     * @covers Smite\API::request
     * @todo   Implement testRequest().
     */
    public function testRequest()
    {
        $guzzle = $this->object->getGuzzleClient();
        // track requests made
        $history = new History;
        $guzzle->getEmitter()->attach($history);

        // create mock data
        $mock = new Mock([
            new Response(200, [], Stream::factory('{"hello":"world"}')),
            new Response(200, [], Stream::factory('not valid json data')),
        ]);
        $guzzle->getEmitter()->attach($mock);

        // make request
        $data = $this->object->request('/ping');

        // verify request data
        $this->assertNotEmpty($data);
        $this->assertAttributeEquals('world', 'hello', $data);

        // make another request
        $data = $this->object->request('/ping');

        // verify 2nd request
        $this->assertNull($data);
    }
}
